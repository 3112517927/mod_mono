<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.4/EN"
                         "http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd">
<article id="modmono">
<artheader>
<title>Mod Mono</title>
<subtitle>Running ASP.NET on Unix with Apache and Mono</subtitle>
<author>
  <firstname>Daniel</firstname>
  <surname>Lopez Ridruejo</surname>
  <affiliation>
    <address><email>daniel @ rawbyte.com</email></address>
  </affiliation>    
</author>
<author>
  <firstname>Gonzalo</firstname>
  <surname>Paniagua Javier</surname>
  <affiliation>
    <orgname>Ximian, Inc.</orgname>
    <address><email>gonzalo @ ximian.com</email></address>
  </affiliation>    
</author>
<pubDate>v0.1, 15 July 2003</pubDate>
</artheader>
<abstract>
 <para>ModMono allows you to run ASP.NET pages on Unix operating systems,
 integrating the Apache web server with the Mono framework. This manual provides
 you with an overview of the module's architecture and with detailed instructions
 on how to install and configure it in a variety of scenarios.
 </para>
</abstract>

<sect1><title>Architecture</title>
<para>
</para>
<sect2><title>Mono and ASP.NET</title>
<para>
ASP.NET is the subsystem of the .NET framework that deals with
development of server-side web applications. It can be embedded
in and work with existing web servers, such as Microsoft IIS.
In that setup, the web server deals with the basic handling of HTTP requests,
which it then passes on to the ASP.NET framework for processing,
returning the result back to the client.
</para>
<para>ModMono provides Apache modules that interface the Apache web server with the 
Mono runtime and alloww you to run ASP.NET pages on Unix servers.
Apache can be setup to serve HTTP requests for static content,
process connections using the SSL protocol, apply rewriting rules
and so on, while it passes requests for ASP.NET pages to the Mono runtime
for processing.
</para>
</sect2>
<sect2><title>ModMono Architecture</title>
<para>
The ModMono distribution provides two connector modules, each one of them
with its own set of advantages and disadvantages.
</para>
<sect3><title>Embedded interpreter</title>
<para>
This module, named mod_mono, embeds a Mono interpreter in each Apache child, as
shown in Figure 1. This has the advantage of robustness: if something goes wrong in
one of the Apache children it can be killed and replaced by a new one. Additionally
Apache has built-in mechanisms for replacing children after a certain number of
requests has been served, helping you deal with memory leaks or unstable code.
</para>
<para>
Currently (as of August 2003) Mono ASP.NET only provides in-memory session support,
which cannot be used for maintaining shared state among the interpreters.
ASP.NET provides other mechanisms for maintaining session state across separate
processes, such as a session server or database but they are not yet implemented in
Mono. Thus, it is not currently possible to use ASP.NET session support with mo_mono.
</para>
<para>
Additionally, each of the processes maintains its on caching setup, so pages will
need to be compiled for each one of them as they are requested, slowing down the server initially.
This can be avoided to a certain extent by precompiling the pages.
</para>
<!-- insert image here -->
</sect3>
<sect3><title>External interpreter</title>
<para>This module, named mod_mono_unix, takes a different approach. A single, external Mono process
is in charge of processing the ASP.NET requests. The Mono runtime is hosted by a modified version
of the XSP server (<filename>mod-mono-server.exe</filename>) that runs standalone and communicates via Unix sockets with
the Apache children, as shown in Figure 2.
</para>
<para>
This setup has the advantages of in-memory caching and session support, since there is only one Mono process.
There is always an overhead involved in communication between two processes, whether that is significant
or not will depend on your particular application. 
</para>
</sect3>

<sect3><title>Which module should I use?</title>
<para>If you require session support or you are using ModMono for development, with
frequent page recompilations, it is recommended that you use mod_mono_unix. 
</para>
<para>
If your application does not relay on shared state, or once external session support
is developed for Mono ASP.NET, mod_mono will be another option. 
</para>
</sect3>

<sect3><title>Other ways of running ASP.NET pages with Mono</title>
<para>You can use XSP, described later in this document, as a standalone web server.
XSP can answer the requests directly or be fronted by an Apache web server acting as a 
reverse proxy. For example, the following configuration snippet will forward all requests
under /mono/ to an XSP webserver running on port 8000
</para>
<screen>
ProxyPass /mono/ http://127.0.0.1:8000
ProxyPassReverse /mono/ http://127.0.0.1:8000
</screen>
</sect3>

</sect2>
</sect1>

<sect1><title>Prerequisites and supported platforms</title>
<para>
ModMono has been developed primarily on Linux, but should work
on all the Unix and Unix-like platforms supported by Mono and Apache.
For example, it is known to work on FreeBSD. A Windows version has not yet
been developed.
</para>
<sect2><title>Apache</title>
<para>ModMono supports both Apache 1.3 and Apache 2.0 (prefork MPM), either compiled
from source or the one that came with your Linux distribution.
</para>
<para>
Apache needs to have been compiled with loadable module support and if you plan on
compiling ModMono from source, then the Apache apxs tool needs to be available. Take a
look at the Installing Apache section for additional details.
</para>
</sect2>
<sect2><title>Mono</title>
<para>ModMono tracks Mono development and it should work out of the box with the latest
Mono release. For instructions on installing Mono please visit 
<ulink URL="http://www.go-mono.com">the Mono website</ulink>.
</para>
<para>
Mono needs to be correctly installed for building mod_mono from source, this means among
other things that pkgconfig is accessible and knows about mono (that is 
'<command>pkgconfig --cflags mono</command>' returns something meaningful)
</para>
</sect2>
<sect2><title>XSP</title>
<para>You will need the ASP.NET examples provided by the Mono XSP package to verify the installation
has been successful. In addition, mod_mono_unix requires <filename>mod-mono-server.exe</filename>,
the standalone process that will host the ASP.NET runtime and that is part of the XSP distribution.
</para>
<para>
You can get XSP from CVS or download it from <ulink URL="http://www.go-mono.com">the Mono website</ulink>.
If you install the ModMono RPM package, XSP is already included.
</para>
</sect2>
<sect2><title>ModMono</title>
<para>If you want to use the Mono version from CVS you will need the GNU autotools (autoconf, automake...)
</para>
</sect2>
</sect1>

<sect1><title>Installation Overview</title>
<para>This document is comprehensive and covers a wide array of installation
options and program versions and can be confusing at times. The installation process
itself is straightforward:
<orderedlist>
<listitem>Install Apache: from source or RPM, 1.3 or 2.0</listitem>
<listitem>Install Mono</listitem>
<listitem>Install XSP</listitem>
<listitem>Install mod_mono: from source or RPM</listitem>

<listitem>Configure Apache: 
<orderedlist>
<listitem>Load module into server</listitem>
<listitem>Specify URL prefix to associate with Mono ASP.NET</listitem>
</orderedlist>
</listitem>

<listitem>Test everything is working correctly</listitem>
</orderedlist>
</para>
</sect1>

<sect1><title>Apache Installation</title>
<para>
You can either use the Apache that came with your Linux distribution or compile
it from source.
</para>
<sect2><title>Apache binary packages</title>
<para>If you want to use the Apache version that came with your distribution and
you wish to build ModMono from source, you will need to install the apxs tool,
which is usually included in the Apache development RPM.  For example, in the case of Red Hat 8.0,
you need the following dev package installed: <filename>httpd-devel-2.0.40-8.i386.rpm</filename>
</para>
<para>You can find Apache binary packages in your distribution CDROM or in one of the mirror sites
on the internet such as rpmfind.net. For example, you can find Apache 2 RPMs for Red Hat 8.0
at <ulink URL="http://www.rpmfind.net/linux/RPM/redhat/8.0/i386/httpd-2.0.40-8.i386.html">http://www.rpmfind.net/linux/RPM/redhat/8.0/i386/httpd-2.0.40-8.i386.html
</ulink> and 
<ulink URL="http://www.rpmfind.net/linux/RPM/redhat/8.0/i386/httpd-devel-2.0.40-8.i386.html">http://www.rpmfind.net/linux/RPM/redhat/8.0/i386/httpd-devel-2.0.40-8.i386.html</ulink>
</para>
<para>To install them type:
<screen>
bash$ <command>rpm -i httpd-2.0.40-8.i386.rpm httpd-devel-2.0.40-8.i386.rpm</command>
</screen>
</para>
</sect2>
<sect2><title>Installing Apache from source</title>
<para>
If you are installing Apache from source you need to enable loadable module support.
You can download the Apache web server from <ulink URL="http://httpd.apache.org">the Apache website</ulink>. For example, for Apache 2,
the distribution tarball will be named something like <filename>httpd-2.0.47.tar.gz</filename>.
You can unpack, build and install it using the following commands:
<screen>
bash$ <command>tar xvfz httpd-2.0.47.tar.gz</command>
bash$ <command>cd httpd-2.0.47</command>
bash$ <command>./configure --prefix=/usr/local/apache2 --enable-so</command>
bash$ <command>make</command>
bash$ <command>make install</command>
</screen>

</para>
</sect2>
</sect1>

<sect1><title>ModMono</title>

<sect2><title>Installation from RPM</title>
<para>You can donwload a binary RPM for Red Hat 8.0 from <ulink URL="http://www.apacheworld.com">the ModMono
home page</ulink>. It includes a XSP distribution and requires the Mono and Apache packages to be installed
beforehand. A Mono configuration file will be placed at <filename class="directory">/etc/httpd/conf.d/mono.conf</filename>.
</para>
</sect2>

<sect2><title>Installation from source distribution</title>
<para>Go to <ulink URL="http://www.apacheworld.org/modmono/">the ModMono
home page</ulink> and download the ModMono source distribution
(although if you are reading this you probably already did so).
</para>
<para>You need to pass to the <command>configure</command> script
the location of the <filename>apxs</filename> executable. For example,
if you are using Red Hat you will need to use <command>./configure --with-apxs=/usr/sbin/apxs</command>
</para>
<screen>
bash$ <command>tar xvfz mod_mono*.tar.gz</command>
bash$ <command>cd mod_mono*</command>
bash$ <command>./configure --with-apxs=/usr/local/apache2/bin/apxs</command>
bash$ <command>make</command>
bash$ <command>make install</command>
</screen>
<para>
If everything goes well, you the following libraries will be built:
</para>
<screen>
<command>mod_mono/src/mod_mono.so</command>
<command>mod_mono/src/mod_mono_unix.so</command>
</screen>
<para>The <command>make install</command> command will install them with the rest 
of the modules. For example, in Red Hat Linux that means
<filename class="directory">/usr/lib/httpd/modules</filename> and if you installed Apache from source
as explained earlier in this document that means <filename class="directory">/usr/local/apache2/modules</filename>
</para>
</sect2>

<sect3><title>mod_mono</title>
<para>The mod_mono connector requires an additional library, <filename>ModMono.dll</filename>.
You can build it typing the following:
</para>
<screen>
bash$ <command>cd src/</command>
bash$ <command>make -f makedll.mak</command>
</screen>
<para>You need to copy the resulting file to the same directory where the rest of Mono DLLs, such
as <filename>corlib.dll</filename>, are. This usually means <filename>/usr/lib</filename>
</para>
<para>
You may get 'Your mono runtime and corlib are out of sync' warnings, that you can safely disregard:
The compiler is complaining about missing built-in methods, but they will be provided by the mod_mono
binary at runtime.
</para>
</sect3>

<sect3><title>mod_mono_unix</title>
<para>mod_mono_unix requires a standalone process that will handle the ASP.NET requests.
The executable <filename>mod-mono-server.exe</filename> will be built as part of XSP.
</para>
</sect3>

<sect2><title>Installation from CVS</title>
<para>If you want to track the latest ModMono developments you
can get the latest source code from the <ulink URL="http://www.go-mono.com/anoncvs.html">Mono CVS</ulink>
</para>
<para>
You can then build the software using 
<screen>
bash$ <command>./autogen.sh --with-apxs=/usr/local/apache2/bin/apxs</command>
bash$ <command>make</command>
bash$ <command>make install</command>
</screen>
</para>
<para>
If you also installed Mono from CVS in a non standard location, you can
use <command>--with-crosspkgdir</command>, as shown in the following example:
<screen>
bash$ <command>PKG_CONFIG_PATH=/usr/local/mono/install/lib/pkgconfig/ ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-crosspkgdir=/usr/local/mono/install/lib/pkgconfig</command>
</screen>
</para>
</sect2>
</sect1>

<sect1><title>XSP</title>
<para> You need the XSP package, currently available in the Mono CVS
or as a tar.gz package from the Mono website. The rest of this document assumes
XSP is installed in <filename class="directory">/usr/local/xsp/</filename>.
The steps to do so are:
</para>    
<screen>
bash$ <command>cd /usr/local</command>
bash$ <command>tar xvfz xsp*.tar.gz</command>
bash$ <command>cd xsp</command>
bash$ <command>make</command>
bash$ <command>make install</command>
</screen>
<para>
Now in <filename>/usr/local/xsp/server/test</filename> you have a directory
with ASP pages and <filename>mod-mono-server.exe</filename>, mod_mono_unix companion.
<filename>mod-mono-server.exe</filename> must be running in order for mod_mono_unix to work.
By default it will create a socket in <filename>/tmp/mod_mono_server</filename>, and it needs
to be readable and writable by the same user Apache is running as. The location of the
socket can be changed as explained in the configuration section.
<!-- needs to be readable by same user apache is runnning as-->
</para>
</sect1>

<sect1><title>ModMono Configuration</title>
<!-- rpm, source -->
<para>
This sections explains in detail the configuration settings necessary to setup mod_mono and mod_mono_unix.
</para>
<!-- Important: .wapi, -->

<sect2><title>mod_mono</title>
<para><emphasis>Currently mod_mono only runs on Apache 2</emphasis>
</para>
<para>You need to edit the Apache httpd.conf configuration file and add the following
directives:
</para>
<screen>
<command>LoadModule mono_module /usr/local/apache2/modules/mod_mono.so</command>
<command>MonoApplication /mono /usr/local/xsp/server/test</command>
</screen>
<para>
The first directive loads the mod_mono module into the server. The module
was copied to the <filename class="directory">modules/</filename> directory during the mod_mono installation.
The MonoApplication directive takes two arguments. The first one is the virtual path, which is part of the URL
used to access your application. The second one is the physical path, the directory where the application resides.
In this case is the directory containing the XSP test pages.  Only one MonoApplication directive is currently allowed.
</para>
<para>If you installed mod_mono from an RPM package the above snippet is already added to the server configuration, take a look
at <filename>/etc/httpd/conf.d/mono.conf</filename>
</para>
<para>Finally, the Mono runtime requires a special <filename class="directory">.wapi/</filename> directory in the home
directory of the user running it. In this case, the Mono runtime is embedded in Apache using mod_mono and that means the
home directory of the user Apache is running as. In Red Hat systems the user is <command>apache</command>,
and the directory will be <filename class="directory">/var/www/.wapi</filename>,
In a default Apache installation the directory will be <filename class="directory">/.wapi</filename>, since the user is <filename>nobody</filename>
and does not have a home directory associated with it. The directory needs to be owned and readable/writable by the same user Apache is running as. 
Make sure also all the parent directories leading to the <filename>.wapi</filename> directory have read and execute permissions.
For example, in a Red Hat system you will need to do the following:
</para>
<screen>
bash$ <command>mkdir /var/www/.wapi/</command>
bash$ <command>chown apache.apache /var/www/.wapi</command>
bash$ <command>chmod 700 /var/www/.wapi</command>
</screen>
<para>If you installed mod_mono from an RPM package the directory is already created for you
</para>
</sect2>
<sect2><title>mod_mono_unix</title>
<para>If you are using Apache 2 you need to edit the Apache httpd.conf configuration file and add the following
directives:
</para>
<screen>
<command>LoadModule mono_unix_module /usr/local/apache2/modules/mod_mono_unix.so</command>
<command>MonoApplication /mono /tmp/mod_mono_server</command>
</screen>
<para>
The first directive loads the mod_mono_unix module into the server. The module
was copied to the <filename class="directory">modules/</filename> directory during the mod_mono_unix installation.
The MonoApplication directive takes two arguments. The first one is the virtual path, which is part of the URL
used to access your application. The second one is the unix socket filename that will be setup by <filename>mod-mono-server</filename>.
You can use any valid filename here, just need to make sure it has the right permissions so both Apache and <filename>mod-mono-server.exe</filename>
can access it and that you use the same file both in <filename>httpd.conf</filename> and in <filename>mod-mono-server.exe</filename>.
To do so you can use the '--virtual mono' and '--file /tmp/mod_mono_server' command line arguments. You can also use FileNameUnix in
the <filename>mod-mono-server.exe.config</filename> appSettings section. Only one MonoApplication directive is currently allowed.
</para>
<para>If you installed mod_mono_unix from an RPM package the above snippet is already added to the server configuration, take a look
at <filename>/etc/httpd/conf.d/mono.conf</filename>.
</para>
<para>
If you are using Apache 1.3, extra configuration is required currently, and the configuration will look something like:
</para>
<screen>
<command>LoadModule mono_unix_module libexec/mod_mono_unix.so</command>
<command>MonoApplication /mono /tmp/mod_mono_server</command>
<command>&lt;Location /mono&gt;
SetHandler modmono-handler
&lt;/Location&gt;</command>
</screen>
</sect2>
</sect1>

<sect1><title>Testing everything works</title>
<para>You can now start your Apache server and point your web browser to
<command>http://127.0.0.1/mono/index.aspx</command>. You should get a 
page with all the examples. If you get an error page, take a look at
the Apache <filename>error_log</filename> file for indications of what may have gone wrong
and make sure you read the troubleshooting section.
</para>
<para>
If you are using mod_mono_unix, <filename>mod-mono-server.exe</filename> needs to be
running before starting Apache.
</para>
</sect1>

<sect1><title>FAQ</title>
<sect2><title>Does ModMono run on Windows?</title>
<para>Not yet, interested in contributing?</para>
</sect2>
</sect1>

<sect1><title>Troubleshooting</title>
<para>This section details common problems you may have run into and how to solve them.
If you get a blank page or a stack trace instead of the page
you expected, something went wrong. To find out what, the most
useful place to look at is the Apache <filename>error_log</filename> file. If you
installed Apache from source as explained it will be in
<filename>/usr/local/apache2/logs</filename>, if you use Red Hat, it will be in
<filename>/var/logs/httpd/</filename>.
It is also recommended to go thru the checklist below to see if you missed any step.
</para>
<sect2><title>Checklist</title>
<para>This checklist covers both installation and operation of mod_mono</para>
<sect3><title>Is Mono correctly installed?</title>
<para>Does <command>pkgconfig --cflags mono</command> return something meaningful?</para>
</sect3>
<sect3><title>Is the Apache 'apxs' utility installed?</title>
<para>If you installed Apache from an RPM, you may need to install an additional 'devel' RPM package</para>
</sect3>
<sect3><title>Is the ModMono.dll correctly installed?</title>
<para>It needs to be placed in the same directory Mono's <filename>corlib.dll</filename> is</para>
</sect3>
<sect3><title>XSP</title>
<para>Is the directory containing your ASP.NET pages writable by the user Apache is running as? This is
currently required for page compilation. Also, all the parent directories leading to it must have
read and execute permissions.</para>
<para>If you are using mod_mono_unix: is it <filename>mod-mono-server.exe</filename> started before you start Apache?
Does it have the same configuration settings (virtual directory, Unix socket filename) than Apache?
Is it running as the same user Apache is running as, so they can correctly share the same Unix socket?
</para>
</sect3>
</sect2>
<sect2><title>I get an error about a <filename>.wapi</filename> directory</title>
<para>
If you get something like:
</para>
<screen>** (process:2899): CRITICAL **: : shared file [/var/www/.wapi/shared_da\
ta-0] open error: No such file or directory</screen>
<para>Take a look at the mod_mono installation section</para>
</sect2>
<sect2><title>I get an error about a missing tmpxxxxxxxxx.dll</title>
<para>
 If you get something like:
</para>
<screen>
Unhandled Exception: System.UnauthorizedAccessException: Access to the path "./tmp1632595207.dll" is denied.
</screen>
<para>
You probably do not  have write permission for holding the
temporary files in your ASP.NET directory.

Probably because the user apache is running as does not
have permission to write in that directory.
You can fix it with a command line such as:
</para>
<screen>
bash$ <command>chown -R apache.apache /usr/local/xsp/server/test</command>
</screen>
</sect2>
</sect1>
</article>
